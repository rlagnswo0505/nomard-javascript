{"version":3,"sources":["src/todo.js"],"names":["toDoForm","document","querySelector","toDoInput","toDoList","TODOS_LS","toDos","deleteToDo","event","btn","target","li","parentNode","removeChild","cleanToDos","filter","toDo","id","parseInt","saveToDos","localStorage","setItem","JSON","stringify","paintToDo","text","createElement","delBtn","span","newId","length","innerText","addEventListener","appendChild","toDoObj","push","handleSubmit","preventDefault","currentValue","value","loadToDos","loadedToDos","getItem","parsedToDos","parse","forEach","init"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAjB;AAAA,IACIC,SAAS,GAAGH,QAAQ,CAACE,aAAT,CAAuB,OAAvB,CADhB;AAAA,IAEIE,QAAQ,GAAGH,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAFf;AAIA,IAAMG,QAAQ,GAAG,OAAjB;AAEA,IAAIC,KAAK,GAAG,EAAZ;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB;AACA;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAlB,CAHuB,CAGG;;AAC1B,MAAMC,EAAE,GAAGF,GAAG,CAACG,UAAf,CAJuB,CAII;;AAC3BR,EAAAA,QAAQ,CAACS,WAAT,CAAqBF,EAArB,EALuB,CAKG;AAC1B;;AACA,MAAMG,UAAU,GAAGR,KAAK,CAACS,MAAN,CAAa,UAAUC,IAAV,EAAgB;AAC5C,WAAOA,IAAI,CAACC,EAAL,KAAYC,QAAQ,CAACP,EAAE,CAACM,EAAJ,CAA3B;AACH,GAFkB,CAAnB;AAGAX,EAAAA,KAAK,GAAGQ,UAAR;AACAK,EAAAA,SAAS;AACZ,EAED;;;AACA,SAASA,SAAT,GAAqB;AACjBC,EAAAA,YAAY,CAACC,OAAb,CAAqBhB,QAArB,EAA+BiB,IAAI,CAACC,SAAL,CAAejB,KAAf,CAA/B,EADiB,CACsC;AAC1D;;AAED,SAASkB,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,MAAMd,EAAE,GAAGV,QAAQ,CAACyB,aAAT,CAAuB,IAAvB,CAAX,CADqB,CACoB;;AACzC,MAAMC,MAAM,GAAG1B,QAAQ,CAACyB,aAAT,CAAuB,QAAvB,CAAf,CAFqB,CAE4B;;AACjD,MAAME,IAAI,GAAG3B,QAAQ,CAACyB,aAAT,CAAuB,MAAvB,CAAb,CAHqB,CAGwB;;AAC7C,MAAMG,KAAK,GAAGvB,KAAK,CAACwB,MAAN,GAAe,CAA7B;AACAF,EAAAA,IAAI,CAACG,SAAL,GAAiBN,IAAjB,CALqB,CAKE;;AACvBE,EAAAA,MAAM,CAACI,SAAP,GAAmB,GAAnB,CANqB,CAMG;;AACxBJ,EAAAA,MAAM,CAACK,gBAAP,CAAwB,OAAxB,EAAiCzB,UAAjC;AACAI,EAAAA,EAAE,CAACsB,WAAH,CAAeL,IAAf,EARqB,CAQC;;AACtBjB,EAAAA,EAAE,CAACsB,WAAH,CAAeN,MAAf,EATqB,CASG;;AACxBhB,EAAAA,EAAE,CAACM,EAAH,GAAQY,KAAR,CAVqB,CAUN;;AACfzB,EAAAA,QAAQ,CAAC6B,WAAT,CAAqBtB,EAArB,EAXqB,CAWK;;AAC1B,MAAMuB,OAAO,GAAG;AACZT,IAAAA,IAAI,EAAEA,IADM;AAEZR,IAAAA,EAAE,EAAEY;AAFQ,GAAhB;AAIAvB,EAAAA,KAAK,CAAC6B,IAAN,CAAWD,OAAX,EAhBqB,CAgBA;;AACrBf,EAAAA,SAAS;AACZ;;AAED,SAASiB,YAAT,CAAsB5B,KAAtB,EAA6B;AACzBA,EAAAA,KAAK,CAAC6B,cAAN;AACA,MAAMC,YAAY,GAAGnC,SAAS,CAACoC,KAA/B;AACAf,EAAAA,SAAS,CAACc,YAAD,CAAT;AACAnC,EAAAA,SAAS,CAACoC,KAAV,GAAkB,EAAlB,CAJyB,CAIH;AACzB;;AAED,SAASC,SAAT,GAAqB;AACjB,MAAMC,WAAW,GAAGrB,YAAY,CAACsB,OAAb,CAAqBrC,QAArB,CAApB,CADiB,CACmC;;AACpD,MAAIoC,WAAW,KAAK,IAApB,EAA0B;AACtB,QAAME,WAAW,GAAGrB,IAAI,CAACsB,KAAL,CAAWH,WAAX,CAApB,CADsB,CACuB;;AAC7CE,IAAAA,WAAW,CAACE,OAAZ,CAAoB,UAAU7B,IAAV,EAAgB;AAChCQ,MAAAA,SAAS,CAACR,IAAI,CAACS,IAAN,CAAT;AACH,KAFD;AAGH;AACJ;;AAED,SAASqB,IAAT,GAAgB;AACZN,EAAAA,SAAS;AACTxC,EAAAA,QAAQ,CAACgC,gBAAT,CAA0B,QAA1B,EAAoCI,YAApC;AACH;;AAEDU,IAAI","file":"todo.48013cdb.js","sourceRoot":"..","sourcesContent":["// 자바스크립트를 이용해서 새로운 태그를 만들고 가공해서 index.html의 특정 태그의 자식 태그로 삽입.\r\n// push 메소드를 사용하여 Array에 특정 요소를 넣음.\r\n// 특정 태그의 id 속성을 자바스크립트를 이용해 설정.\r\n// local storage에는 자바스크립트의 데이터 형식으로 저장할 수 없기 때문에, string으로 저장해야 한다.\r\n// JSON : JavaScript Object Notation의 약어.\r\n// JSON.pares() 함수를 이용해서 JSON 형태의 데이터를 자바스크립트 Object 형태로 변형.\r\n// forEach : array에 담겨 있는 것들에 각각 한 번씩 함수를 실행함.\r\n// 즉, forEach는 array를 위한 함수임.\r\n// 이와 비슷하게 filter 함수도 있음.\r\n// 이 함수는 array를 통해 모든 요소의 함수를 설정할 수 있고, 값이 true인 것들만 가지고 새로운 array를 만들어 반환한다.\r\n\r\nconst toDoForm = document.querySelector(\".js-toDoForm\"),\r\n    toDoInput = toDoForm.querySelector(\"input\"),\r\n    toDoList = document.querySelector(\".js-toDoList\");\r\n\r\nconst TODOS_LS = \"toDos\";\r\n\r\nlet toDos = [];\r\n\r\nfunction deleteToDo(event) {\r\n    // console.dir(event.target) // 이 방법으로 event.target의 부모 노드를 확인할 수 있음.\r\n    // event.target.parentNode // event.target.parentNode는 여러 개의 버튼 중 어느 버튼이 클릭됐는지 알려준다. 정확히는, 클릭된 버튼 태드의 부모 태그를 불러온다.\r\n    const btn = event.target; // 클릭된 버튼을 할당.\r\n    const li = btn.parentNode; // 그리고 그 부모 태그(li)를 할당.\r\n    toDoList.removeChild(li); // 해당 태그를 지움.\r\n    // filter 함수는 array의 모든 요소들에 함수를 실행하고, 값이 true인 것들만 가지고 새로운 array를 만들어 반환함.\r\n    const cleanToDos = toDos.filter(function (toDo) {\r\n        return toDo.id !== parseInt(li.id);\r\n    });\r\n    toDos = cleanToDos;\r\n    saveToDos();\r\n}\r\n\r\n// to-do-list를 local storage에 저장하는 함수\r\nfunction saveToDos() {\r\n    localStorage.setItem(TODOS_LS, JSON.stringify(toDos)); // JSON.stringify 함수를 사용해 자바스크립트 objectfmf string으로 바꿔준다.\r\n}\r\n\r\nfunction paintToDo(text) {\r\n    const li = document.createElement(\"li\"); // li 태그를 만들어서 변수에 할당\r\n    const delBtn = document.createElement(\"button\"); // button 태그를 만들어서 변수에 할당\r\n    const span = document.createElement(\"span\"); // span 태그를 만들어서 변수에 할당\r\n    const newId = toDos.length + 1;\r\n    span.innerText = text; // 사용자가 입력한 텍스트가 span태그의 텍스트가 되도록 설정\r\n    delBtn.innerText = \"❌\"; // 버튼의 텍스트는 \"X\"로 설정\r\n    delBtn.addEventListener(\"click\", deleteToDo);\r\n    li.appendChild(span); // li 태그의 자식 태그로 span 태그 삽입\r\n    li.appendChild(delBtn); // li 태그의 자식 태그로 버튼을 삽입\r\n    li.id = newId; // li태그의 id 속성을 object의 id와 같게 함.\r\n    toDoList.appendChild(li); // 위에서 설정한 li 태그들을 최종적으로 toDoList에 삽입.\r\n    const toDoObj = {\r\n        text: text,\r\n        id: newId,\r\n    };\r\n    toDos.push(toDoObj); // toDos라는 Array 안에 toDoObj 객체를 넣음.\r\n    saveToDos();\r\n}\r\n\r\nfunction handleSubmit(event) {\r\n    event.preventDefault();\r\n    const currentValue = toDoInput.value;\r\n    paintToDo(currentValue);\r\n    toDoInput.value = \"\"; // 텍스트를 입력하고 엔터를 치면 사라지게 하기\r\n}\r\n\r\nfunction loadToDos() {\r\n    const loadedToDos = localStorage.getItem(TODOS_LS); // 로컬스토리지에서 키가 TODOS_LS인 값을 가져오기\r\n    if (loadedToDos !== null) {\r\n        const parsedToDos = JSON.parse(loadedToDos); // JSON을 자바스크립트가 이해할 수 있는 object 데이터 형식으로 변형\r\n        parsedToDos.forEach(function (toDo) {\r\n            paintToDo(toDo.text);\r\n        });\r\n    }\r\n}\r\n\r\nfunction init() {\r\n    loadToDos();\r\n    toDoForm.addEventListener(\"submit\", handleSubmit);\r\n}\r\n\r\ninit();\r\n"]}